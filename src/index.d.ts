// Generated by dts-bundle-generator v5.8.0

declare class AuthorDTO {
	userId?: string;
	name: string;
	email?: string;
	surname: string;
	nickname?: string;
	orcid?: string;
	credit?: CREDIT_TYPE[];
	gravatar?: string;
}
declare class CallForPapers {
	title: string;
	deadline?: Date;
	description: string;
	scope: string;
	guestEditors: string;
	disciplines: string[];
	contact: string;
	contactEmail: string;
	visible: boolean;
}
declare class CommentDTO {
	id: string;
	author: AuthorDTO;
	createdOn: Date;
	content: string;
	gravatar?: string;
	tags: string[];
}
declare class Keys {
	p256dh: string;
	auth: string;
}
declare enum ACCESS_RIGHT {
	CCBY = "cc by",
	CCBYND = "cc by-nd",
	CC0 = "cc0"
}
declare enum COMMUNITY_TYPE {
	university = "university",
	business = "business"
}
declare enum CREDIT_TYPE {
	methodology = "methodology",
	conceptualization = "conceptualization",
	software = "software",
	validation = "validation",
	formalAnalysis = "formal analysis",
	investigation = "investigation",
	resources = "resources",
	dataCuration = "data curation",
	writingOriginalDraft = "writing original draft",
	writingReviewEditing = "writing review and editing",
	visualization = "visualization",
	supervision = "supervision",
	projectAdministration = "project administration",
	fundingAcquisition = "funding acquisition"
}
declare enum DEPOSIT_STATUS {
	draft = "draft",
	pendingApproval = "pending approval",
	inReview = "in review",
	published = "published",
	preprint = "preprint"
}
declare enum INVITE_STATUS {
	pending = "pending",
	accepted = "accepted",
	rejected = "rejected"
}
declare enum INVITE_TYPE {
	review = "review"
}
declare enum PUBLICATION_TYPE {
	book = "book",
	bookSection = "book section",
	conferencePaper = "conference paper",
	article = "article",
	patent = "patent",
	preprint = "preprint",
	report = "report",
	softwareDocumentation = "software documentation",
	thesis = "thesis",
	technicalNote = "technical note",
	workingPaper = "working paper",
	policyReport = "policy report",
	registeredReport = "registered report",
	proposal = "proposal",
	reviewArticle = "review article",
	video = "video",
	other = "other"
}
declare enum REVIEW_DECISION {
	accepted = "accepted",
	minorRevision = "minor revision",
	mayorRevision = "mayor revision"
}
declare enum REVIEW_STATUS {
	draft = "draft",
	published = "published"
}
declare enum REVIEW_TYPE {
	openReview = "open review"
}
declare enum USER_TYPE {
	student = "student",
	medical = "medical",
	business = "business",
	researcher = "researcher",
	citizen = "citizen"
}
export declare class AppNotificationDTO {
	_id: string;
	userId: string;
	title: string;
	body: string;
	icon: string;
	createdOn: Date;
	isRead: boolean;
	action?: string;
}
export declare class BlockchainNetworkDTO {
	name: string;
	displayName: string;
	networkId: number;
	appAddress: string;
	escrowAddress: string;
	tokenAddress: string;
	explorerUrl: string;
}
export declare class CommunityDTO {
	_id: string;
	name: string;
	users: CommunityUser[];
	description?: string;
	country?: string;
	type: COMMUNITY_TYPE;
	codename?: string;
	acknowledgement?: string;
	twitterURL?: string;
	facebookURL?: string;
	websiteURL?: string;
	logoURL?: string;
	guidelinesURL?: string;
	callForPapers?: CallForPapers;
	moderators?: UserSummaryDTO[];
	actions: string[];
}
export declare class CommunityPrivateDTO {
	_id: string;
	name: string;
	users: CommunityUser[];
	description?: string;
	country?: string;
	type?: COMMUNITY_TYPE;
	codename?: string;
	acknowledgement?: string;
	twitterURL?: string;
	facebookURL?: string;
	websiteURL?: string;
	logoURL?: string;
	guidelinesURL?: string;
	dataciteEnabled: boolean;
	callForPapers?: CallForPapers;
	dataciteAccountID?: string;
	datacitePrefix?: string;
	moderators?: UserSummaryDTO[];
	actions: string[];
}
export declare class CommunityUpdateDto {
	name?: string;
	description?: string;
	country?: string;
	type?: COMMUNITY_TYPE;
	acknowledgement?: string;
	twitterURL?: string;
	facebookURL?: string;
	websiteURL?: string;
	logoURL?: string;
	guidelinesURL?: string;
	callForPapers?: CallForPapers;
	dataciteAccountID?: string;
	datacitePassword?: string;
	datacitePrefix?: string;
}
export declare class CommunityUser {
	userId: string;
	role: string;
}
export declare class CreateDepositDTO {
	title: string;
	community?: string;
	doi?: string;
}
export declare class CreateInstitutionDTO {
	domain: string;
	name: string;
	country?: string;
	city?: string;
	synonym?: string;
}
export declare class CreateReviewDTO {
	revealReviewerIdentity: boolean;
	deposit: string;
	invite?: string;
}
export declare class DepositDTO {
	_id: string;
	owner: string;
	ownerProfile: UserSummaryDTO;
	nickname: string;
	title: string;
	abstract: string;
	publicationType: PUBLICATION_TYPE;
	accessRight: ACCESS_RIGHT;
	submissionDate?: string;
	publicationDate?: string;
	status: DEPOSIT_STATUS;
	peerReviews: ReviewDTO[];
	reviewType: REVIEW_TYPE;
	authors: AuthorDTO[];
	transactions?: Record<string, unknown>;
	publicationFile?: FileMetadata;
	files: FileMetadata[];
	gravatar?: string;
	keywords: string[];
	keccak256?: string;
	doi?: string;
	url?: string;
	pdfUrl?: string;
	presignedPDFURL?: string;
	disciplines: string[];
	references?: Reference[];
	createdOn?: Date;
	version?: number;
	community?: CommunityDTO;
	html?: string;
	images?: string[];
	comments: CommentDTO[];
	canBeReviewed: boolean;
	gitRepository?: string;
	binderURL?: string;
	actions: string[];
	openAireIdentifier?: string;
}
export declare class DisciplineDTO {
	name: string;
	description?: string;
}
export declare class DomainDTO {
	emailDomain: string;
}
export declare class FileMetadata {
	filename: string;
	contentType: string;
	contentLength: number;
	tags: string[];
	presignedURL?: string;
}
export declare class InstitutionDTO {
	name: string;
	domain: string;
	country?: string;
	city?: string;
	synonym?: string;
}
export declare class InviteDTO {
	_id: string;
	inviteType: INVITE_TYPE;
	status: INVITE_STATUS;
	deadline: Date;
	sender: UserSummaryDTO;
	addressee: string;
	createdOn: Date;
	data?: Record<string, unknown>;
	actions: string[];
}
export declare class PushSubscriptionDTO {
	endpoint: string;
	expirationTime?: Date;
	userId?: string;
	keys: Keys;
}
export declare class Reference {
	reference: string;
	url?: string;
}
export declare class ReviewDTO {
	_id: string;
	owner: string;
	ownerProfile: UserSummaryDTO;
	author?: string;
	comments?: string;
	decision?: REVIEW_DECISION;
	file?: FileMetadata;
	transactions?: Record<string, unknown>;
	url?: string;
	fileUrl?: string;
	status: REVIEW_STATUS;
	gravatar?: string;
	reward?: number;
	revealReviewerIdentity: boolean;
	deposit: DepositDTO;
	creationDate: string;
	publicationDate: string;
	wasInvited?: boolean;
	keccak256?: string;
	actions: string[];
}
export declare class UpdateDepositDTO {
	title?: string;
	abstract?: string;
	publicationType?: PUBLICATION_TYPE;
	accessRight?: ACCESS_RIGHT;
	publicationDate?: Date;
	submissionDate?: Date;
	status?: DEPOSIT_STATUS;
	reviewType?: REVIEW_TYPE;
	authors?: unknown;
	transactions?: unknown;
	keccak256?: string;
	keywords?: string[];
	doi?: string;
	disciplines?: string[];
	references?: unknown;
	community?: string;
	canBeReviewed?: boolean;
	gitRepository?: string;
}
export declare class UpdateReviewDTO {
	author?: string;
	comments?: string;
	status?: REVIEW_STATUS;
	reward?: number;
	revealReviewerIdentity?: boolean;
	decision?: REVIEW_DECISION;
	transactions?: unknown;
	publicationDate?: Date;
	wasInvited?: boolean;
	keccak256?: string;
}
export declare class UpdateUserDTO {
	email?: string;
	firstName?: string;
	lastName?: string;
	aboutMe?: string;
	orcid?: string;
	linkedin?: string;
	blog?: string;
	role?: string;
	starredDeposits?: string[];
	isOnboarded?: boolean;
	acceptedTC?: boolean;
	simultaneousReviews?: number;
	userType?: USER_TYPE;
	communities?: string[];
	disciplines?: string[];
}
export declare class UserPrivateDTO {
	userId: string;
	firstName: string;
	lastName: string;
	nickname: string;
	communities: CommunityDTO[];
	gravatar: string;
	starredDeposits?: string[];
	isReviewer: boolean;
	isOnboarded: boolean;
	institution?: string;
	email?: string;
	emailConfirmed: boolean;
	orcid?: string;
	userType: USER_TYPE;
	disciplines: string[];
	aboutMe?: string;
	blog?: string;
	role?: string;
	roles: string[];
	linkedin?: string;
	percentageComplete: number;
	inviteToken?: string;
	simultaneousReviews?: number;
	acceptedTC: boolean;
	actions: string[];
	constructor(partial: Partial<UserPrivateDTO>);
}
export declare class UserPublicDTO {
	userId: string;
	firstName: string;
	lastName: string;
	nickname: string;
	communities: CommunityDTO[];
	gravatar: string;
	isReviewer: boolean;
	institution?: string;
	orcid?: string;
	userType: USER_TYPE;
	disciplines: string[];
	aboutMe?: string;
	blog?: string;
	role?: string;
	linkedin?: string;
	actions: string[];
	constructor(partial: Partial<UserPublicDTO>);
}
export declare class UserSummaryDTO {
	userId: string;
	firstName: string;
	lastName: string;
	nickname: string;
	communities: CommunityDTO[];
	gravatar: string;
	institution?: string;
	constructor(partial: Partial<UserSummaryDTO>);
}

export {};
